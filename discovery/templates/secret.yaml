{{- $secretName := printf "%s-secrets" .Release.Name }}
{{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $secretName) | default dict }}
{{- if empty $secretObj }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  labels:
    {{- include "discovery.labels" . | nindent 4 }}
  # We want to have Helm keep this secret around if we're installing using
  # a Chart name that is not auto-generated.
  {{- $generatedRegexPattern := printf "^%s-[0-9]+$" .Chart.Name }}
  {{- if not (regexMatch $generatedRegexPattern .Release.Name) }}
  annotations:
    "helm.sh/resource-policy": "keep"
  {{- end }}
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secretData := (get $secretObj "data") | default dict }}
  # set $serverPassword to existing secret data or require the Values one from the user
  {{- $serverPassword := (get $secretData "server-password") | default (required "server.password is required" .Values.server.password | b64enc) }}
  server-password: {{ $serverPassword | quote }}
  # set $djangoSecretKey to existing secret data or require the Values one from the user
  {{- $djangoSecretKey := (get $secretData "django-secret-key") | default (required "server.djangoSecretKey is required" .Values.server.djangoSecretKey | b64enc) }}
  django-secret-key: {{ $djangoSecretKey | quote }}
{{- end }}
